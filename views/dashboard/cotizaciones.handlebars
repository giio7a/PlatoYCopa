<div class="page-header">
  <h2 class="page-title">Gestión de Cotizaciones</h2>
  <div class="page-actions">
    <button class="btn btn-primary" data-toggle="modal" data-target="addCotizacionModal">
      <i class="bi bi-plus-lg"></i> <span class="btn-text">Nueva Cotización</span>
    </button>
    <button class="btn btn-secondary" data-toggle="modal" data-target="addContratoModal">
      <i class="bi bi-file-earmark-text"></i> <span class="btn-text">Nuevo Contrato</span>
    </button>
  </div>
</div>

<div class="dashboard-tabs">
  <button class="dashboard-tab {{#unless tab}}active{{/unless}}" data-tab="cotizaciones">Cotizaciones</button>
  <button class="dashboard-tab {{#if (eq tab 'contratos')}}active{{/if}}" data-tab="contratos">Contratos</button>
</div>

<div class="tab-content {{#unless tab}}active{{/unless}}" data-tab-content="cotizaciones">
  <div class="card">
    <div class="card-header">
      <h3 class="card-title">Cotizaciones</h3>
      <div class="card-tools">
        <div class="search-box">
          <i class="bi bi-search"></i>
          <input type="text" id="searchCotizaciones" class="table-search" placeholder="Buscar cotización...">
        </div>
        <div class="filter-box">
          <select id="filterEstadoCotizacion" class="form-control">
            <option value="">Todos los estados</option>
            <option value="pendiente" {{#if (eq estado 'pendiente')}}selected{{/if}}>Pendiente</option>
            <option value="confirmada" {{#if (eq estado 'confirmada')}}selected{{/if}}>Confirmada</option>
            <option value="cancelada" {{#if (eq estado 'cancelada')}}selected{{/if}}>Cancelada</option>
          </select>
        </div>
      </div>
    </div>
    <div class="card-body">
      <div class="table-container">
        <table class="data-table responsive-table" id="cotizacionesTable">
          <thead>
            <tr>
              <th data-sort="id">#</th>
              <th data-sort="nombre_cliente">Cliente</th>
              <th data-sort="tipo_evento">Tipo de Evento</th>
              <th data-sort="fecha_evento">Fecha</th>
              <th data-sort="num_meseros">Meseros</th>
              <th data-sort="costo_total">Total</th>
              <th data-sort="estado">Estado</th>
              <th data-sort="contrato">Contrato</th>
              <th>Acciones</th>
            </tr>
          </thead>
          <tbody>
            {{#each cotizaciones}}
            <tr data-id="{{this.id}}">
              <td data-label="ID" data-column="id">{{this.id}}</td>
              <td data-label="Cliente" data-column="nombre_cliente">{{this.nombre_cliente}}</td>
              <td data-label="Tipo de Evento" data-column="tipo_evento">{{this.tipo_evento}}</td>
              <td data-label="Fecha" data-column="fecha_evento">{{formatDate this.fecha_evento}}</td>
              <td data-label="Meseros" data-column="num_meseros">{{this.num_meseros}}</td>
              <td data-label="Total" data-column="costo_total">${{this.costo_total}}</td>
              <td data-label="Estado" data-column="estado">
                <span class="badge-status {{this.estado}}">{{this.estado}}</span>
              </td>
              <td data-label="Contrato" data-column="contrato">
                {{#if this.numero_contrato}}
                <span class="badge-contrato">{{this.numero_contrato}}</span>
                {{else}}
                <button class="btn-sm btn-outline-primary crear-contrato-btn" data-id="{{this.id}}">
                  Crear
                </button>
                {{/if}}
              </td>
              <td data-label="Acciones">
                <div class="actions">
                  <button class="btn-table-action view" title="Ver detalles" data-toggle="modal" data-target="viewCotizacionModal" data-id="{{this.id}}">
                    <i class="bi bi-eye"></i>
                  </button>
                  <button class="btn-table-action edit" title="Editar" data-toggle="modal" data-target="editCotizacionModal" data-id="{{this.id}}">
                    <i class="bi bi-pencil"></i>
                  </button>
                  <div class="dropdown">
                    <button class="btn-table-action dropdown-toggle" title="Más acciones">
                      <i class="bi bi-three-dots-vertical"></i>
                    </button>
                    <div class="dropdown-menu">
                      {{#if this.numero_contrato}}
                      <button class="dropdown-item ver-contrato-btn" data-numero="{{this.numero_contrato}}">
                        <i class="bi bi-file-earmark-text"></i> Ver contrato
                      </button>
                      {{/if}}
                      <button class="dropdown-item cambiar-estado-btn {{#if (eq this.estado 'pendiente')}}{{else}}hidden{{/if}}" data-id="{{this.id}}" data-estado="confirmada">
                        <i class="bi bi-check-circle"></i> Marcar como confirmada
                      </button>
                      <button class="dropdown-item cambiar-estado-btn {{#if (eq this.estado 'pendiente')}}{{else}}hidden{{/if}}" data-id="{{this.id}}" data-estado="cancelada">
                        <i class="bi bi-x-circle"></i> Marcar como cancelada
                      </button>
                      <button class="dropdown-item cambiar-estado-btn {{#if (eq this.estado 'confirmada')}}{{else}}hidden{{/if}}" data-id="{{this.id}}" data-estado="pendiente">
                        <i class="bi bi-arrow-counterclockwise"></i> Volver a pendiente
                      </button>
                      <button class="dropdown-item cambiar-estado-btn {{#if (eq this.estado 'cancelada')}}{{else}}hidden{{/if}}" data-id="{{this.id}}" data-estado="pendiente">
                        <i class="bi bi-arrow-counterclockwise"></i> Volver a pendiente
                      </button>
                      <div class="dropdown-divider"></div>
                      <button class="dropdown-item btn-delete text-danger" data-id="{{this.id}}" data-type="cotizaciones" data-name="{{this.nombre_cliente}}">
                        <i class="bi bi-trash"></i> Eliminar
                      </button>
                    </div>
                  </div>
                </div>
              </td>
            </tr>
            {{else}}
            <tr>
              <td colspan="9" class="text-center">No hay cotizaciones registradas</td>
            </tr>
            {{/each}}
          </tbody>
        </table>
      </div>
      
      <div class="table-pagination">
        <div class="pagination-info">
          Mostrando {{cotizaciones.length}} de {{totalCotizaciones}} cotizaciones
        </div>
        <div class="pagination-controls">
          <a href="/dashboard/cotizaciones?page={{prevPage}}{{#if estado}}&estado={{estado}}{{/if}}" class="pagination-button {{#unless hasPrevPage}}disabled{{/unless}}">
            <i class="bi bi-chevron-left"></i>
          </a>
          
          {{#each pages}}
            <a href="/dashboard/cotizaciones?page={{this.number}}{{#if ../estado}}&estado={{../estado}}{{/if}}" class="pagination-button {{#if this.active}}active{{/if}}">
              {{this.number}}
            </a>
          {{/each}}
          
          <a href="/dashboard/cotizaciones?page={{nextPage}}{{#if estado}}&estado={{estado}}{{/if}}" class="pagination-button {{#unless hasNextPage}}disabled{{/unless}}">
            <i class="bi bi-chevron-right"></i>
          </a>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="tab-content {{#if (eq tab 'contratos')}}active{{/if}}" data-tab-content="contratos">
  <div class="card">
    <div class="card-header">
      <h3 class="card-title">Contratos</h3>
      <div class="card-tools">
        <div class="search-box">
          <i class="bi bi-search"></i>
          <input type="text" id="searchContratos" class="table-search" placeholder="Buscar contrato...">
        </div>
        <div class="filter-box">
          <select id="filterEstadoContrato" class="form-control">
            <option value="">Todos los estados</option>
            <option value="pendiente" {{#if (eq estado 'pendiente')}}selected{{/if}}>Pendiente</option>
            <option value="completado" {{#if (eq estado 'completado')}}selected{{/if}}>Completado</option>
            <option value="cancelado" {{#if (eq estado 'cancelado')}}selected{{/if}}>Cancelado</option>
          </select>
        </div>
      </div>
    </div>
    <div class="card-body">
      <div class="table-container">
        <table class="data-table responsive-table" id="contratosTable">
          <thead>
            <tr>
              <th data-sort="numero_contrato">Número</th>
              <th data-sort="nombre_cliente">Cliente</th>
              <th data-sort="tipo_evento">Tipo de Evento</th>
              <th data-sort="fecha_evento">Fecha</th>
              <th data-sort="estado">Estado</th>
              <th>Acciones</th>
            </tr>
          </thead>
          <tbody>
            {{#each contratos}}
            <tr data-id="{{this.id}}">
              <td data-label="Número" data-column="numero_contrato">{{this.numero_contrato}}</td>
              <td data-label="Cliente" data-column="nombre_cliente">{{this.nombre_cliente}}</td>
              <td data-label="Tipo de Evento" data-column="tipo_evento">{{this.tipo_evento}}</td>
              <td data-label="Fecha" data-column="fecha_evento">{{formatDate this.fecha_evento}}</td>
              <td data-label="Estado" data-column="estado">
                <span class="badge-status {{this.estado}}">{{this.estado}}</span>
              </td>
              <td data-label="Acciones">
                <div class="actions">
                  <button class="btn-table-action view" title="Ver detalles" data-toggle="modal" data-target="viewContratoModal" data-id="{{this.id}}">
                    <i class="bi bi-eye"></i>
                  </button>
                  <button class="btn-table-action edit" title="Editar" data-toggle="modal" data-target="editContratoModal" data-id="{{this.id}}">
                    <i class="bi bi-pencil"></i>
                  </button>
                  <div class="dropdown">
                    <button class="btn-table-action dropdown-toggle" title="Más acciones">
                      <i class="bi bi-three-dots-vertical"></i>
                    </button>
                    <div class="dropdown-menu">
                      <button class="dropdown-item cambiar-estado-contrato-btn {{#if (eq this.estado 'pendiente')}}{{else}}hidden{{/if}}" data-id="{{this.id}}" data-estado="completado">
                        <i class="bi bi-check-circle"></i> Marcar como completado
                      </button>
                      <button class="dropdown-item cambiar-estado-contrato-btn {{#if (eq this.estado 'pendiente')}}{{else}}hidden{{/if}}" data-id="{{this.id}}" data-estado="cancelado">
                        <i class="bi bi-x-circle"></i> Marcar como cancelado
                      </button>
                      <button class="dropdown-item cambiar-estado-contrato-btn {{#if (eq this.estado 'completado')}}{{else}}hidden{{/if}}" data-id="{{this.id}}" data-estado="pendiente">
                        <i class="bi bi-arrow-counterclockwise"></i> Volver a pendiente
                      </button>
                      <button class="dropdown-item cambiar-estado-contrato-btn {{#if (eq this.estado 'cancelado')}}{{else}}hidden{{/if}}" data-id="{{this.id}}" data-estado="pendiente">
                        <i class="bi bi-arrow-counterclockwise"></i> Volver a pendiente
                      </button>
                      <div class="dropdown-divider"></div>
                      <button class="dropdown-item btn-delete text-danger" data-id="{{this.id}}" data-type="contratos" data-name="{{this.numero_contrato}}">
                        <i class="bi bi-trash"></i> Eliminar
                      </button>
                    </div>
                  </div>
                </div>
              </td>
            </tr>
            {{else}}
            <tr>
              <td colspan="6" class="text-center">No hay contratos registrados</td>
            </tr>
            {{/each}}
          </tbody>
        </table>
      </div>
      
      <div class="table-pagination">
        <div class="pagination-info">
          Mostrando {{contratos.length}} de {{totalContratos}} contratos
        </div>
        <div class="pagination-controls">
          <a href="/dashboard/cotizaciones?tab=contratos&page={{prevPage}}{{#if estado}}&estado={{estado}}{{/if}}" class="pagination-button {{#unless hasPrevPage}}disabled{{/unless}}">
            <i class="bi bi-chevron-left"></i>
          </a>
          
          {{#each pages}}
            <a href="/dashboard/cotizaciones?tab=contratos&page={{this.number}}{{#if ../estado}}&estado={{../estado}}{{/if}}" class="pagination-button {{#if this.active}}active{{/if}}">
              {{this.number}}
            </a>
          {{/each}}
          
          <a href="/dashboard/cotizaciones?tab=contratos&page={{nextPage}}{{#if estado}}&estado={{estado}}{{/if}}" class="pagination-button {{#unless hasNextPage}}disabled{{/unless}}">
            <i class="bi bi-chevron-right"></i>
          </a>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Modal para Ver Cotización -->
<div class="modal" id="viewCotizacionModal">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h3 class="modal-title">Detalles de Cotización</h3>
        <button type="button" class="modal-close" data-dismiss="modal">
          <i class="bi bi-x-lg"></i>
        </button>
      </div>
      <div class="modal-body">
        <div class="cotizacion-details">
          <div class="cotizacion-header">
            <div class="cotizacion-title">
              <h2 id="view_nombre_cliente"></h2>
              <span class="badge-status" id="view_estado"></span>
            </div>
            <div class="cotizacion-meta">
              <div class="meta-item">
                <i class="bi bi-calendar-event"></i>
                <span id="view_fecha_evento"></span>
              </div>
              <div class="meta-item">
                <i class="bi bi-geo-alt"></i>
                <span id="view_ubicacion"></span>
              </div>
              <div class="meta-item">
                <i class="bi bi-tag"></i>
                <span id="view_tipo_evento"></span>
              </div>
            </div>
          </div>
          
          <div class="cotizacion-body">
            <div class="cotizacion-section">
              <h4>Información del Cliente</h4>
              <div class="info-grid">
                <div class="info-item">
                  <span class="info-label">Email:</span>
                  <span class="info-value" id="view_email_cliente"></span>
                </div>
                <div class="info-item">
                  <span class="info-label">Teléfono:</span>
                  <span class="info-value" id="view_telefono_cliente"></span>
                </div>
                <div class="info-item">
                  <span class="info-label">Número de Contrato:</span>
                  <span class="info-value" id="view_numero_contrato">-</span>
                </div>
              </div>
            </div>
            
            <div class="cotizacion-section">
              <h4>Detalles del Servicio</h4>
              <div class="info-grid">
                <div class="info-item">
                  <span class="info-label">Meseros:</span>
                  <span class="info-value" id="view_num_meseros"></span>
                </div>
                <div class="info-item">
                  <span class="info-label">Duración:</span>
                  <span class="info-value" id="view_duracion_servicio"></span>
                </div>
                <div class="info-item">
                  <span class="info-label">Servicios Adicionales:</span>
                  <div class="info-value" id="view_servicios_adicionales">
                    <ul id="view_servicios_list"></ul>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="cotizacion-section">
              <h4>Costos</h4>
              <div class="info-grid">
                <div class="info-item">
                  <span class="info-label">Costo Base:</span>
                  <span class="info-value" id="view_costo_base"></span>
                </div>
                <div class="info-item">
                  <span class="info-label">Adicionales:</span>
                  <span class="info-value" id="view_costo_adicionales"></span>
                </div>
                <div class="info-item">
                  <span class="info-label">Cargo por Ubicación:</span>
                  <span class="info-value" id="view_cargo_ubicacion"></span>
                </div>
                <div class="info-item total">
                  <span class="info-label">Total:</span>
                  <span class="info-value" id="view_costo_total"></span>
                </div>
              </div>
            </div>
            
            <div class="cotizacion-section" id="view_detalles_section">
              <h4>Detalles Adicionales</h4>
              <p id="view_detalles"></p>
            </div>
          </div>
          
          <div class="cotizacion-footer">
            <div class="cotizacion-dates">
              <div class="date-item">
                <span class="date-label">Creada:</span>
                <span id="view_fecha_creacion"></span>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
        <button type="button" class="btn btn-primary" id="viewEditBtn">Editar</button>
        <button type="button" class="btn btn-success" id="viewCreateContratoBtn">Crear Contrato</button>
      </div>
    </div>
  </div>
</div>

<!-- Modal para Ver Contrato -->
<div class="modal" id="viewContratoModal">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h3 class="modal-title">Detalles del Contrato</h3>
        <button type="button" class="modal-close" data-dismiss="modal">
          <i class="bi bi-x-lg"></i>
        </button>
      </div>
      <div class="modal-body">
        <div class="contrato-details">
          <div class="contrato-header">
            <div class="contrato-title">
              <h2 id="view_contrato_numero"></h2>
              <span class="badge-status" id="view_contrato_estado"></span>
            </div>
          </div>
          
          <div class="contrato-body">
            <div class="contrato-section">
              <h4>Información del Cliente</h4>
              <div class="info-grid">
                <div class="info-item">
                  <span class="info-label">Cliente:</span>
                  <span class="info-value" id="view_contrato_cliente"></span>
                </div>
                <div class="info-item">
                  <span class="info-label">Tipo de Evento:</span>
                  <span class="info-value" id="view_contrato_tipo_evento"></span>
                </div>
                <div class="info-item">
                  <span class="info-label">Fecha del Evento:</span>
                  <span class="info-value" id="view_contrato_fecha"></span>
                </div>
              </div>
            </div>
          </div>
          
          <div class="contrato-footer">
            <div class="contrato-dates">
              <div class="date-item">
                <span class="date-label">Creado:</span>
                <span id="view_contrato_fecha_creacion"></span>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
        <button type="button" class="btn btn-primary" id="viewEditContratoBtn">Editar</button>
      </div>
    </div>
  </div>
</div>

<!-- Modal para Agregar Cotización -->
<div class="modal" id="addCotizacionModal">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h3 class="modal-title">Crear Nueva Cotización</h3>
        <button type="button" class="modal-close" data-dismiss="modal">
          <i class="bi bi-x-lg"></i>
        </button>
      </div>
      <div class="modal-body">
        <form id="addCotizacionForm" class="crud-form needs-validation" novalidate>
          <div class="form-tabs">
            <button type="button" class="form-tab active" data-tab="cliente">Cliente</button>
            <button type="button" class="form-tab" data-tab="evento">Evento</button>
            <button type="button" class="form-tab" data-tab="servicios">Servicios</button>
            <button type="button" class="form-tab" data-tab="detalles">Detalles</button>
          </div>
          
          <div class="form-tab-content active" data-tab-content="cliente">
            <div class="form-row">
              <div class="form-col">
                <div class="form-group">
                  <label for="nombre_cliente" class="form-label">Nombre del Cliente</label>
                  <input type="text" class="form-control" id="nombre_cliente" name="nombre_cliente" required>
                  <div class="invalid-feedback">Por favor ingresa el nombre del cliente.</div>
                </div>
              </div>
              
              <div class="form-col">
                <div class="form-group">
                  <label for="email_cliente" class="form-label">Email del Cliente</label>
                  <input type="email" class="form-control" id="email_cliente" name="email_cliente" required>
                  <div class="invalid-feedback">Por favor ingresa un email válido.</div>
                </div>
              </div>
            </div>
            
            <div class="form-group">
              <label for="telefono_cliente" class="form-label">Teléfono del Cliente</label>
              <input type="tel" class="form-control" id="telefono_cliente" name="telefono_cliente" required>
              <div class="invalid-feedback">Por favor ingresa un teléfono válido.</div>
            </div>
            
            <div class="form-group">
              <label for="numero_contrato" class="form-label">Número de Contrato (Opcional)</label>
              <div class="input-group">
                <input type="text" class="form-control" id="numero_contrato" name="numero_contrato" placeholder="Dejar en blanco para crear sin contrato">
                <div class="input-group-append">
                  <button type="button" class="btn btn-outline-primary" id="generarNumeroBtn">
                    <i class="bi bi-magic"></i> Generar
                  </button>
                </div>
              </div>
              <div class="form-text">Si se proporciona, se creará o actualizará un contrato automáticamente.</div>
            </div>
            
            <div class="form-nav-buttons">
              <button type="button" class="btn btn-primary next-tab" data-next="evento">Siguiente</button>
            </div>
          </div>
          
          <div class="form-tab-content" data-tab-content="evento">
            <div class="form-row">
              <div class="form-col">
                <div class="form-group">
                  <label for="tipo_evento_id" class="form-label">Tipo de Evento</label>
                  <select class="form-control" id="tipo_evento_id" name="tipo_evento_id" required>
                    <option value="">Seleccionar...</option>
                    {{#each tiposEventos}}
                    <option value="{{this.id}}">{{this.nombre}}</option>
                    {{/each}}
                  </select>
                  <div class="invalid-feedback">Por favor selecciona un tipo de evento.</div>
                </div>
              </div>
              
              <div class="form-col">
                <div class="form-group">
                  <label for="num_invitados" class="form-label">Número de Meseros</label>
                  <input type="number" class="form-control" id="num_invitados" name="num_invitados" min="1" value="1" required>
                  <div class="invalid-feedback">Por favor ingresa el número de meseros.</div>
                </div>
              </div>
            </div>
            
            <div class="form-row">
              <div class="form-col">
                <div class="form-group">
                  <label for="fecha_evento" class="form-label">Fecha del Evento</label>
                  <input type="date" class="form-control" id="fecha_evento" name="fecha_evento" required>
                  <div class="invalid-feedback">Por favor selecciona una fecha.</div>
                </div>
              </div>
              
              <div class="form-col">
                <div class="form-group">
                  <label for="hora_evento" class="form-label">Hora del Evento</label>
                  <input type="time" class="form-control" id="hora_evento" name="hora_evento" required>
                  <div class="invalid-feedback">Por favor selecciona una hora.</div>
                </div>
              </div>
            </div>
            
            <div class="form-group">
              <label for="ubicacion" class="form-label">Ubicación</label>
              <input type="text" class="form-control" id="ubicacion" name="ubicacion" required>
              <div class="invalid-feedback">Por favor ingresa la ubicación del evento.</div>
            </div>
            
            <div class="form-nav-buttons">
              <button type="button" class="btn btn-secondary prev-tab" data-prev="cliente">Anterior</button>
              <button type="button" class="btn btn-primary next-tab" data-next="servicios">Siguiente</button>
            </div>
          </div>
          
          <div class="form-tab-content" data-tab-content="servicios">
            <div class="form-group">
              <label class="form-label">Servicios Incluidos</label>
              <div class="services-grid">
                {{#each servicios}}
                <div class="service-checkbox">
                  <input type="checkbox" id="servicio_{{this.id}}" name="servicios[]" value="{{this.id}}">
                  <label for="servicio_{{this.id}}">{{this.titulo}}</label>
                </div>
                {{/each}}
              </div>
            </div>
            
            <div class="form-nav-buttons">
              <button type="button" class="btn btn-secondary prev-tab" data-prev="evento">Anterior</button>
              <button type="button" class="btn btn-primary next-tab" data-next="detalles">Siguiente</button>
            </div>
          </div>
          
          <div class="form-tab-content" data-tab-content="detalles">
            <div class="form-group">
              <label for="detalles" class="form-label">Detalles Adicionales</label>
              <textarea class="form-control" id="detalles" name="detalles" rows="3"></textarea>
            </div>
            
            <div class="form-row">
              <div class="form-col">
                <div class="form-group">
                  <label for="costo_total" class="form-label">Costo Total</label>
                  <div class="input-group">
                    <div class="input-group-prepend">
                      <span class="input-group-text">$</span>
                    </div>
                    <input type="number" class="form-control" id="costo_total" name="costo_total" min="0" step="0.01" required>
                  </div>
                  <div class="invalid-feedback">Por favor ingresa el costo total.</div>
                </div>
              </div>
              
              <div class="form-col">
                <div class="form-group">
                  <label for="estado" class="form-label">Estado</label>
                  <select class="form-control" id="estado" name="estado" required>
                    <option value="pendiente">Pendiente</option>
                    <option value="confirmada">Confirmada</option>
                    <option value="cancelada">Cancelada</option>
                  </select>
                </div>
              </div>
            </div>
            
            <div class="form-nav-buttons">
              <button type="button" class="btn btn-secondary prev-tab" data-prev="servicios">Anterior</button>
              <button type="submit" class="btn btn-primary">Guardar Cotización</button>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Modal para Editar Cotización -->
<div class="modal" id="editCotizacionModal">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h3 class="modal-title">Editar Cotización</h3>
        <button type="button" class="modal-close" data-dismiss="modal">
          <i class="bi bi-x-lg"></i>
        </button>
      </div>
      <div class="modal-body">
        <form id="editCotizacionForm" class="crud-form needs-validation" novalidate>
          <input type="hidden" id="edit_id" name="id">
          
          <div class="form-tabs">
            <button type="button" class="form-tab active" data-tab="edit-cliente">Cliente</button>
            <button type="button" class="form-tab" data-tab="edit-evento">Evento</button>
            <button type="button" class="form-tab" data-tab="edit-servicios">Servicios</button>
            <button type="button" class="form-tab" data-tab="edit-detalles">Detalles</button>
          </div>
          
          <div class="form-tab-content active" data-tab-content="edit-cliente">
            <div class="form-row">
              <div class="form-col">
                <div class="form-group">
                  <label for="edit_nombre_cliente" class="form-label">Nombre del Cliente</label>
                  <input type="text" class="form-control" id="edit_nombre_cliente" name="nombre_cliente" required>
                  <div class="invalid-feedback">Por favor ingresa el nombre del cliente.</div>
                </div>
              </div>
              
              <div class="form-col">
                <div class="form-group">
                  <label for="edit_email_cliente" class="form-label">Email del Cliente</label>
                  <input type="email" class="form-control" id="edit_email_cliente" name="email_cliente" required>
                  <div class="invalid-feedback">Por favor ingresa un email válido.</div>
                </div>
              </div>
            </div>
            
            <div class="form-group">
              <label for="edit_telefono_cliente" class="form-label">Teléfono del Cliente</label>
              <input type="tel" class="form-control" id="edit_telefono_cliente" name="telefono_cliente" required>
              <div class="invalid-feedback">Por favor ingresa un teléfono válido.</div>
            </div>
            
            <div class="form-group">
              <label for="edit_numero_contrato" class="form-label">Número de Contrato (Opcional)</label>
              <div class="input-group">
                <input type="text" class="form-control" id="edit_numero_contrato" name="numero_contrato">
                <div class="input-group-append">
                  <button type="button" class="btn btn-outline-primary" id="editGenerarNumeroBtn">
                    <i class="bi bi-magic"></i> Generar
                  </button>
                </div>
              </div>
              <div class="form-text">Si se proporciona, se creará o actualizará un contrato automáticamente.</div>
            </div>
            
            <div class="form-nav-buttons">
              <button type="button" class="btn btn-primary next-tab" data-next="edit-evento">Siguiente</button>
            </div>
          </div>
          
          <div class="form-tab-content" data-tab-content="edit-evento">
            <div class="form-row">
              <div class="form-col">
                <div class="form-group">
                  <label for="edit_tipo_evento_id" class="form-label">Tipo de Evento</label>
                  <select class="form-control" id="edit_tipo_evento_id" name="tipo_evento_id" required>
                    <option value="">Seleccionar...</option>
                    {{#each tiposEventos}}
                    <option value="{{this.id}}">{{this.nombre}}</option>
                    {{/each}}
                  </select>
                  <div class="invalid-feedback">Por favor selecciona un tipo de evento.</div>
                </div>
              </div>
              
              <div class="form-col">
                <div class="form-group">
                  <label for="edit_num_invitados" class="form-label">Número de Meseros</label>
                  <input type="number" class="form-control" id="edit_num_invitados" name="num_invitados" min="1" required>
                  <div class="invalid-feedback">Por favor ingresa el número de meseros.</div>
                </div>
              </div>
            </div>
            
            <div class="form-row">
              <div class="form-col">
                <div class="form-group">
                  <label for="edit_fecha_evento" class="form-label">Fecha del Evento</label>
                  <input type="date" class="form-control" id="edit_fecha_evento" name="fecha_evento" required>
                  <div class="invalid-feedback">Por favor selecciona una fecha.</div>
                </div>
              </div>
              
              <div class="form-col">
                <div class="form-group">
                  <label for="edit_hora_evento" class="form-label">Hora del Evento</label>
                  <input type="time" class="form-control" id="edit_hora_evento" name="hora_evento" required>
                  <div class="invalid-feedback">Por favor selecciona una hora.</div>
                </div>
              </div>
            </div>
            
            <div class="form-group">
              <label for="edit_ubicacion" class="form-label">Ubicación</label>
              <input type="text" class="form-control" id="edit_ubicacion" name="ubicacion" required>
              <div class="invalid-feedback">Por favor ingresa la ubicación del evento.</div>
            </div>
            
            <div class="form-nav-buttons">
              <button type="button" class="btn btn-secondary prev-tab" data-prev="edit-cliente">Anterior</button>
              <button type="button" class="btn btn-primary next-tab" data-next="edit-servicios">Siguiente</button>
            </div>
          </div>
          
          <div class="form-tab-content" data-tab-content="edit-servicios">
            <div class="form-group">
              <label class="form-label">Servicios Incluidos</label>
              <div class="services-grid" id="edit_servicios_grid">
                {{#each servicios}}
                <div class="service-checkbox">
                  <input type="checkbox" id="edit_servicio_{{this.id}}" name="servicios[]" value="{{this.id}}">
                  <label for="edit_servicio_{{this.id}}">{{this.titulo}}</label>
                </div>
                {{/each}}
              </div>
            </div>
            
            <div class="form-nav-buttons">
              <button type="button" class="btn btn-secondary prev-tab" data-prev="edit-evento">Anterior</button>
              <button type="button" class="btn btn-primary next-tab" data-next="edit-detalles">Siguiente</button>
            </div>
          </div>
          
          <div class="form-tab-content" data-tab-content="edit-detalles">
            <div class="form-group">
              <label for="edit_detalles" class="form-label">Detalles Adicionales</label>
              <textarea class="form-control" id="edit_detalles" name="detalles" rows="3"></textarea>
            </div>
            
            <div class="form-row">
              <div class="form-col">
                <div class="form-group">
                  <label for="edit_costo_total" class="form-label">Costo Total</label>
                  <div class="input-group">
                    <div class="input-group-prepend">
                      <span class="input-group-text">$</span>
                    </div>
                    <input type="number" class="form-control" id="edit_costo_total" name="costo_total" min="0" step="0.01" required>
                  </div>
                  <div class="invalid-feedback">Por favor ingresa el costo total.</div>
                </div>
              </div>
              
              <div class="form-col">
                <div class="form-group">
                  <label for="edit_estado" class="form-label">Estado</label>
                  <select class="form-control" id="edit_estado" name="estado" required>
                    <option value="pendiente">Pendiente</option>
                    <option value="confirmada">Confirmada</option>
                    <option value="cancelada">Cancelada</option>
                  </select>
                </div>
              </div>
            </div>
            
            <div class="form-nav-buttons">
              <button type="button" class="btn btn-secondary prev-tab" data-prev="edit-servicios">Anterior</button>
              <button type="submit" class="btn btn-primary">Actualizar Cotización</button>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Modal para Agregar Contrato -->
<div class="modal" id="addContratoModal">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h3 class="modal-title">Crear Nuevo Contrato</h3>
        <button type="button" class="modal-close" data-dismiss="modal">
          <i class="bi bi-x-lg"></i>
        </button>
      </div>
      <div class="modal-body">
        <form id="addContratoForm" class="crud-form needs-validation" novalidate>
          <div class="form-group">
            <label for="contrato_numero" class="form-label">Número de Contrato</label>
            <div class="input-group">
              <input type="text" class="form-control" id="contrato_numero" name="numero_contrato" required>
              <div class="input-group-append">
                <button type="button" class="btn btn-outline-primary" id="contratoGenerarNumeroBtn">
                  <i class="bi bi-magic"></i> Generar
                </button>
              </div>
            </div>
            <div class="invalid-feedback">Por favor ingresa un número de contrato.</div>
          </div>
          
          <div class="form-group">
            <label for="contrato_nombre_cliente" class="form-label">Nombre del Cliente</label>
            <input type="text" class="form-control" id="contrato_nombre_cliente" name="nombre_cliente" required>
            <div class="invalid-feedback">Por favor ingresa el nombre del cliente.</div>
          </div>
          
          <div class="form-row">
            <div class="form-col">
              <div class="form-group">
                <label for="contrato_tipo_evento_id" class="form-label">Tipo de Evento</label>
                <select class="form-control" id="contrato_tipo_evento_id" name="tipo_evento_id" required>
                  <option value="">Seleccionar...</option>
                  {{#each tiposEventos}}
                  <option value="{{this.id}}">{{this.nombre}}</option>
                  {{/each}}
                </select>
                <div class="invalid-feedback">Por favor selecciona un tipo de evento.</div>
              </div>
            </div>
            
            <div class="form-col">
              <div class="form-group">
                <label for="contrato_fecha_evento" class="form-label">Fecha del Evento</label>
                <input type="date" class="form-control" id="contrato_fecha_evento" name="fecha_evento" required>
                <div class="invalid-feedback">Por favor selecciona una fecha.</div>
              </div>
            </div>
          </div>
          
          <div class="form-group">
            <label for="contrato_estado" class="form-label">Estado</label>
            <select class="form-control" id="contrato_estado" name="estado" required>
              <option value="pendiente">Pendiente</option>
              <option value="completado">Completado</option>
              <option value="cancelado">Cancelado</option>
            </select>
          </div>
          
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
            <button type="submit" class="btn btn-primary">Guardar Contrato</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Modal para Editar Contrato -->
<div class="modal" id="editContratoModal">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h3 class="modal-title">Editar Contrato</h3>
        <button type="button" class="modal-close" data-dismiss="modal">
          <i class="bi bi-x-lg"></i>
        </button>
      </div>
      <div class="modal-body">
        <form id="editContratoForm" class="crud-form needs-validation" novalidate>
          <input type="hidden" id="edit_contrato_id" name="id">
          
          <div class="form-group">
            <label for="edit_contrato_numero" class="form-label">Número de Contrato</label>
            <input type="text" class="form-control" id="edit_contrato_numero" name="numero_contrato" required>
            <div class="invalid-feedback">Por favor ingresa un número de contrato.</div>
          </div>
          
          <div class="form-group">
            <label for="edit_contrato_nombre_cliente" class="form-label">Nombre del Cliente</label>
            <input type="text" class="form-control" id="edit_contrato_nombre_cliente" name="nombre_cliente" required>
            <div class="invalid-feedback">Por favor ingresa el nombre del cliente.</div>
          </div>
          
          <div class="form-row">
            <div class="form-col">
              <div class="form-group">
                <label for="edit_contrato_tipo_evento_id" class="form-label">Tipo de Evento</label>
                <select class="form-control" id="edit_contrato_tipo_evento_id" name="tipo_evento_id" required>
                  <option value="">Seleccionar...</option>
                  {{#each tiposEventos}}
                  <option value="{{this.id}}">{{this.nombre}}</option>
                  {{/each}}
                </select>
                <div class="invalid-feedback">Por favor selecciona un tipo de evento.</div>
              </div>
            </div>
            
            <div class="form-col">
              <div class="form-group">
                <label for="edit_contrato_fecha_evento" class="form-label">Fecha del Evento</label>
                <input type="date" class="form-control" id="edit_contrato_fecha_evento" name="fecha_evento" required>
                <div class="invalid-feedback">Por favor selecciona una fecha.</div>
              </div>
            </div>
          </div>
          
          <div class="form-group">
            <label for="edit_contrato_estado" class="form-label">Estado</label>
            <select class="form-control" id="edit_contrato_estado" name="estado" required>
              <option value="pendiente">Pendiente</option>
              <option value="completado">Completado</option>
              <option value="cancelado">Cancelado</option>
            </select>
          </div>
          
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
            <button type="submit" class="btn btn-primary">Actualizar Contrato</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Modal de Confirmación para Eliminar -->
<div class="modal" id="confirmDeleteModal">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h3 class="modal-title">Confirmar Eliminación</h3>
        <button type="button" class="modal-close" data-dismiss="modal">
          <i class="bi bi-x-lg"></i>
        </button>
      </div>
      <div class="modal-body">
        <p>¿Estás seguro de que deseas eliminar <span id="deleteItemType">esta cotización</span> <strong id="deleteItemName"></strong>?</p>
        <p>Esta acción no se puede deshacer.</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
        <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Eliminar</button>
      </div>
    </div>
  </div>
</div>

<!-- Toast para notificaciones -->
<div class="toast-container"></div>

{{#section 'styles'}}
<style>
  /* Estilos para el encabezado de página */
  .page-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 20px;
    flex-wrap: wrap;
    gap: 15px;
    padding: 0 10px;
  }
  
  .page-title {
    color: var(--gold);
    font-weight: 300;
    margin: 0;
    font-size: 1.8rem;
  }
  
  .page-actions {
    display: flex;
    gap: 10px;
  }
  
  /* Estilos para las pestañas del dashboard */
  .dashboard-tabs {
    display: flex;
    gap: 5px;
    margin-bottom: 20px;
    border-bottom: 1px solid var(--gold-border);
    padding-bottom: 10px;
  }
  
  .dashboard-tab {
    background: none;
    border: none;
    color: var(--white-dimmer);
    padding: 10px 20px;
    border-radius: 5px 5px 0 0;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 1.1rem;
  }
  
  .dashboard-tab:hover {
    background-color: var(--gold-light);
    color: var(--gold);
  }
  
  .dashboard-tab.active {
    background-color: var(--gold);
    color: var(--black);
  }
  
  .tab-content {
    display: none;
  }
  
  .tab-content.active {
    display: block;
  }
  
  /* Estilos para la barra de herramientas */
  .card-tools {
    display: flex;
    align-items: center;
    gap: 10px;
    flex-wrap: wrap;
  }
  
  .filter-box {
    flex-shrink: 0;
  }
  
  .filter-box select {
    width: 200px;
    background-color: var(--black-lighter);
    border: 1px solid var(--gold-border);
    color: var(--white);
    border-radius: 5px;
    padding: 8px 10px;
  }
  
  /* Estilos para la tabla */
  .table-container {
    overflow-x: auto;
    width: 100%;
    margin-bottom: 1rem;
    -webkit-overflow-scrolling: touch;
  }
  
  /* Estilos responsive para la tabla */
  .responsive-table {
    width: 100%;
    border-collapse: collapse;
  }
  
  .responsive-table th {
    text-align: left;
    padding: 12px 15px;
    background-color: var(--gold-light);
    color: var(--gold);
    font-weight: 600;
    white-space: nowrap;
  }
  
  .responsive-table td {
    padding: 12px 15px;
    text-align: left;
    border-bottom: 1px solid var(--gold-border);
  }
  
  .responsive-table tr:hover {
    background-color: var(--gold-lighter);
  }
  
  /* Estilos para la paginación */
  .table-pagination {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-top: 20px;
    flex-wrap: wrap;
    gap: 15px;
  }
  
  .pagination-info {
    color: var(--white-dimmer);
    font-size: 0.9rem;
  }
  
  .pagination-controls {
    display: flex;
    gap: 5px;
  }
  
  .pagination-button {
    background-color: var(--black-lighter);
    border: 1px solid var(--gold-border);
    color: var(--white);
    width: 36px;
    height: 36px;
    border-radius: 5px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    text-decoration: none;
  }
  
  .pagination-button:hover:not(.disabled) {
    background-color: var(--gold-light);
    color: var(--gold);
    text-decoration: none;
  }
  
  .pagination-button.active {
    background-color: var(--gold);
    color: var(--black);
    border-color: var(--gold);
  }
  
  .pagination-button.disabled {
    opacity: 0.5;
    cursor: not-allowed;
    pointer-events: none;
  }
  
  /* Estilos para los badges de estado */
  .badge-status {
    display: inline-block;
    padding: 3px 8px;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 500;
    text-transform: capitalize;
  }
  
  .badge-status.pendiente {
    background-color: rgba(255, 193, 7, 0.2);
    color: var(--warning);
  }
  
  .badge-status.confirmada, .badge-status.completado {
    background-color: rgba(40, 167, 69, 0.2);
    color: var(--success);
  }
  
  .badge-status.cancelada, .badge-status.cancelado {
    background-color: rgba(220, 53, 69, 0.2);
    color: var(--danger);
  }
  
  /* Estilos para el badge de contrato */
  .badge-contrato {
    display: inline-block;
    padding: 3px 8px;
    border-radius: 3px;
    font-size: 0.8rem;
    font-weight: 500;
    background-color: rgba(13, 110, 253, 0.2);
    color: var(--info);
  }
  
  /* Estilos para los grupos de inputs */
  .input-group {
    display: flex;
    align-items: stretch;
  }
  
  .input-group-prepend {
    display: flex;
  }
  
  .input-group-append {
    display: flex;
  }
  
  .input-group-text {
    display: flex;
    align-items: center;
    padding: 10px 15px;
    background-color: var(--gold-light);
    color: var(--gold);
    border: 1px solid var(--gold-border);
    border-right: none;
    border-radius: 5px 0 0 5px;
  }
  
  .input-group .form-control {
    border-radius: 0;
  }
  
  .input-group .form-control:first-child {
    border-radius: 5px 0 0 5px;
  }
  
  .input-group .form-control:last-child {
    border-radius: 0 5px 5px 0;
  }
  
  .input-group-append .btn {
    border-radius: 0 5px 5px 0;
    height: 100%;
  }
  
  /* Estilos para los servicios */
  .services-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 10px;
    margin-top: 10px;
  }
  
  .service-checkbox {
    display: flex;
    align-items: center;
    padding: 8px 12px;
    background-color: var(--black-lighter);
    border: 1px solid var(--gold-border);
    border-radius: 5px;
    transition: all 0.3s ease;
  }
  
  .service-checkbox:hover {
    background-color: var(--gold-light);
  }
  
  .service-checkbox input {
    margin-right: 10px;
    width: 18px;
    height: 18px;
    cursor: pointer;
  }
  
  .service-checkbox label {
    cursor: pointer;
    margin: 0;
  }
  
  /* Estilos para modales */
  .modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1050;
    overflow-y: auto;
    padding: 20px;
  }
  
  .modal.show {
    display: block;
  }
  
  .modal-dialog {
    position: relative;
    width: 100%;
    max-width: 600px;
    margin: 30px auto;
    background-color: var(--black-light);
    border-radius: 5px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
    transform: translateY(-20px);
    transition: transform 0.3s ease-out;
  }
  
  .modal-dialog.modal-lg {
    max-width: 800px;
  }
  
  .modal.show .modal-dialog {
    transform: translateY(0);
  }
  
  .modal-content {
    position: relative;
    width: 100%;
  }
  
  .modal-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 15px 20px;
    border-bottom: 1px solid var(--gold-border);
  }
  
  .modal-title {
    color: var(--gold);
    margin: 0;
    font-size: 1.5rem;
  }
  
  .modal-close {
    background: none;
    border: none;
    color: var(--white-dimmer);
    font-size: 1.5rem;
    cursor: pointer;
    padding: 0;
    transition: color 0.3s ease;
  }
  
  .modal-close:hover {
    color: var(--gold);
  }
  
  .modal-body {
    padding: 20px;
  }
  
  .modal-footer {
    display: flex;
    align-items: center;
    justify-content: flex-end;
    gap: 10px;
    padding: 15px 20px;
    border-top: 1px solid var(--gold-border);
  }
  
  /* Estilos para las pestañas del formulario */
  .form-tabs {
    display: flex;
    overflow-x: auto;
    gap: 5px;
    margin-bottom: 20px;
    border-bottom: 1px solid var(--gold-border);
    padding-bottom: 10px;
  }
  
  .form-tab {
    background: none;
    border: none;
    color: var(--white-dimmer);
    padding: 8px 15px;
    border-radius: 5px;
    cursor: pointer;
    transition: all 0.3s ease;
    white-space: nowrap;
  }
  
  .form-tab:hover {
    background-color: var(--gold-light);
    color: var(--gold);
  }
  
  .form-tab.active {
    background-color: var(--gold);
    color: var(--black);
  }
  
  .form-tab-content {
    display: none;
  }
  
  .form-tab-content.active {
    display: block;
  }
  
  .form-nav-buttons {
    display: flex;
    justify-content: space-between;
    margin-top: 20px;
  }
  
  /* Estilos para detalles de cotización */
  .cotizacion-details, .contrato-details {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }
  
  .cotizacion-header, .contrato-header {
    border-bottom: 1px solid var(--gold-border);
    padding-bottom: 15px;
  }
  
  .cotizacion-title, .contrato-title {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 10px;
  }
  
  .cotizacion-title h2, .contrato-title h2 {
    color: var(--gold);
    margin: 0;
    font-size: 1.5rem;
  }
  
  .cotizacion-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
  }
  
  .meta-item {
    display: flex;
    align-items: center;
    gap: 5px;
    color: var(--white-dimmer);
  }
  
  .meta-item i {
    color: var(--gold);
  }
  
  .cotizacion-body, .contrato-body {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }
  
  .cotizacion-section, .contrato-section {
    border-bottom: 1px solid var(--gold-border);
    padding-bottom: 15px;
  }
  
  .cotizacion-section h4, .contrato-section h4 {
    color: var(--gold);
    margin-top: 0;
    margin-bottom: 10px;
    font-size: 1.2rem;
  }
  
  .info-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 15px;
  }
  
  .info-item {
    display: flex;
    flex-direction: column;
    gap: 5px;
  }
  
  .info-label {
    color: var(--white-dimmer);
    font-size: 0.9rem;
  }
  
  .info-value {
    font-weight: 500;
  }
  
  .info-item.total {
    grid-column: 1 / -1;
    border-top: 1px solid var(--gold-border);
    padding-top: 10px;
    margin-top: 10px;
  }
  
  .info-item.total .info-value {
    color: var(--gold);
    font-size: 1.2rem;
  }
  
  .cotizacion-footer, .contrato-footer {
    display: flex;
    justify-content: space-between;
    color: var(--white-dimmer);
    font-size: 0.9rem;
  }
  
  .date-item {
    display: flex;
    gap: 5px;
  }
  
  .date-label {
    font-weight: 500;
  }
  
  /* Estilos para dropdown */
  .dropdown {
    position: relative;
    display: inline-block;
  }
  
  .dropdown-toggle {
    cursor: pointer;
  }
  
  .dropdown-menu {
    display: none;
    position: absolute;
    right: 0;
    z-index: 1000;
    min-width: 200px;
    padding: 5px 0;
    margin: 2px 0 0;
    background-color: var(--black-light);
    border: 1px solid var(--gold-border);
    border-radius: 5px;
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
  }
  
  .dropdown-menu.show {
    display: block;
  }
  
  .dropdown-item {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 8px 15px;
    clear: both;
    font-weight: 400;
    color: var(--white);
    text-align: inherit;
    white-space: nowrap;
    background-color: transparent;
    border: 0;
    width: 100%;
    text-align: left;
    cursor: pointer;
  }
  
  .dropdown-item:hover {
    background-color: var(--gold-light);
    color: var(--gold);
  }
  
  .dropdown-divider {
    height: 0;
    margin: 5px 0;
    overflow: hidden;
    border-top: 1px solid var(--gold-border);
  }
  
  .dropdown-item.text-danger {
    color: var(--danger);
  }
  
  .dropdown-item.text-danger:hover {
    background-color: rgba(220, 53, 69, 0.1);
  }
  
  .dropdown-item.hidden {
    display: none;
  }
  
  /* Estilos para toast */
  .toast-container {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 1060;
    display: flex;
    flex-direction: column;
    gap: 10px;
  }
  
  .toast {
    min-width: 250px;
    max-width: 350px;
    background-color: var(--black-light);
    color: var(--white);
    border-radius: 5px;
    padding: 15px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.3s ease;
    border-left: 4px solid var(--gold);
  }
  
  .toast.show {
    opacity: 1;
    transform: translateY(0);
  }
  
  .toast.success {
    border-left-color: var(--success);
  }
  
  .toast.error {
    border-left-color: var(--danger);
  }
  
  .toast.info {
    border-left-color: var(--info);
  }
  
  .toast-content {
    display: flex;
    align-items: center;
    gap: 10px;
  }
  
  .toast-content i {
    font-size: 1.5rem;
  }
  
  .toast-content i.bi-check-circle {
    color: var(--success);
  }
  
  .toast-content i.bi-x-circle {
    color: var(--danger);
  }
  
  .toast-content i.bi-info-circle {
    color: var(--info);
  }
  
  .toast-close {
    position: absolute;
    top: 10px;
    right: 10px;
    background: none;
    border: none;
    color: var(--white-dimmer);
    font-size: 1rem;
    cursor: pointer;
    padding: 0;
    transition: color 0.3s ease;
  }
  
  .toast-close:hover {
    color: var(--white);
  }
  
  /* Animación de carga */
  .spin {
    animation: spin 1s linear infinite;
    display: inline-block;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  /* Estilos para botones */
  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 8px 16px;
    border-radius: 4px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    border: none;
    gap: 5px;
  }
  
  .btn-primary {
    background-color: var(--gold);
    color: var(--black);
  }
  
  .btn-primary:hover {
    background-color: var(--gold-dark);
  }
  
  .btn-secondary {
    background-color: var(--black-light);
    color: var(--white);
    border: 1px solid var(--gold-border);
  }
  
  .btn-secondary:hover {
    background-color: var(--black-lighter);
  }
  
  .btn-success {
    background-color: var(--success);
    color: white;
  }
  
  .btn-success:hover {
    background-color: var(--success-dark);
  }
  
  .btn-danger {
    background-color: var(--danger);
    color: white;
  }
  
  .btn-danger:hover {
    background-color: var(--danger-dark);
  }
  
  .btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
  
  .btn-sm {
    padding: 4px 8px;
    font-size: 0.8rem;
  }
  
  .btn-outline-primary {
    background-color: transparent;
    color: var(--gold);
    border: 1px solid var(--gold);
  }
  
  .btn-outline-primary:hover {
    background-color: var(--gold);
    color: var(--black);
  }
  
  /* Estilos para botones de acción en la tabla */
  .actions {
    display: flex;
    justify-content: center;
    gap: 5px;
  }
  
  .btn-table-action {
    background: none;
    border: none;
    color: var(--white);
    cursor: pointer;
    padding: 5px;
    border-radius: 3px;
    transition: all 0.3s ease;
  }
  
  .btn-table-action:hover {
    background-color: var(--gold-lighter);
  }
  
  .btn-table-action.view {
    color: var(--info);
  }
  
  .btn-table-action.edit {
    color: var(--warning);
  }
  
  .btn-table-action.delete {
    color: var(--danger);
  }
  
  /* Estilos para móvil */
  @media screen and (max-width: 768px) {
    .page-title {
      font-size: 1.5rem;
    }
    
    .btn-text {
      display: none;
    }
    
    .btn-primary, .btn-secondary {
      width: 40px;
      height: 40px;
      padding: 0;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .dashboard-tabs {
      flex-wrap: wrap;
    }
    
    .dashboard-tab {
      flex: 1;
      text-align: center;
      padding: 8px;
      font-size: 1rem;
    }
    
    .card-tools {
      flex-direction: column;
      align-items: flex-start;
      width: 100%;
      gap: 10px;
    }
    
    .search-box, .filter-box, .filter-box select {
      width: 100%;
    }
    
    .responsive-table thead {
      display: none;
    }
    
    .responsive-table, 
    .responsive-table tbody, 
    .responsive-table tr, 
    .responsive-table td {
      display: block;
      width: 100%;
    }
    
    .responsive-table tr {
      margin-bottom: 15px;
      border: 1px solid var(--gold-border);
      border-radius: 5px;
      overflow: hidden;
    }
    
    .responsive-table td {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 10px 15px;
      text-align: right;
      border-bottom: 1px solid var(--gold-border);
    }
    
    .responsive-table td:last-child {
      border-bottom: none;
    }
    
    .responsive-table td::before {
      content: attr(data-label);
      font-weight: 600;
      color: var(--gold);
      text-align: left;
      padding-right: 10px;
    }
    
    .responsive-table td .actions {
      justify-content: flex-end;
    }
    
    .table-pagination {
      flex-direction: column;
      align-items: flex-start;
    }
    
    .pagination-controls {
      width: 100%;
      justify-content: center;
      flex-wrap: wrap;
    }
    
    /* Ajustes para modales en móvil */
    .modal-dialog {
      margin: 10px auto;
      width: calc(100% - 20px);
      max-width: none;
    }
    
    .modal-body {
      padding: 15px;
    }
    
    .form-row {
      flex-direction: column;
    }
    
    .form-col {
      width: 100%;
      padding: 0;
    }
    
    .form-group {
      margin-bottom: 15px;
    }
    
    .services-grid {
      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    }
    
    .service-checkbox {
      padding: 10px;
    }
    
    .service-checkbox input {
      width: 20px;
      height: 20px;
    }
    
    .info-grid {
      grid-template-columns: 1fr;
    }
    
    .form-tabs {
      flex-wrap: wrap;
    }
    
    .form-tab {
      flex: 1 1 calc(50% - 5px);
      text-align: center;
      font-size: 0.9rem;
      padding: 8px 5px;
    }
  }
  
  /* Ajustes para orientación landscape */
  @media (max-width: 992px) and (orientation: landscape) {
    .modal-dialog {
      max-width: 800px;
      margin: 20px auto;
    }
    
    .modal-body {
      max-height: calc(100vh - 150px);
      overflow-y: auto;
    }
    
    .form-row {
      flex-direction: row;
    }
    
    .form-col {
      width: 50%;
      padding: 0 10px;
    }
    
    .form-col:first-child {
      padding-left: 0;
    }
    
    .form-col:last-child {
      padding-right: 0;
    }
    
    .services-grid {
      grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
    }
    
    /* Ajustes para tablas en landscape */
    .responsive-table thead {
      display: table-header-group;
    }
    
    .responsive-table tbody {
      display: table-row-group;
    }
    
    .responsive-table tr {
      display: table-row;
      margin-bottom: 0;
      border: none;
    }
    
    .responsive-table td {
      display: table-cell;
      text-align: left;
      justify-content: flex-start;
    }
    
    .responsive-table td::before {
      content: none;
    }
  }
  
  /* Ajustes para pantallas muy pequeñas */
  @media (max-width: 320px) {
    .page-header {
      flex-direction: column;
      align-items: flex-start;
    }
    
    .page-actions {
      width: 100%;
      justify-content: flex-end;
    }
    
    .card-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 10px;
    }
    
    .services-grid {
      grid-template-columns: 1fr;
    }
    
    .form-tabs {
      flex-wrap: wrap;
    }
    
    .form-tab {
      flex: 1 1 calc(50% - 5px);
      text-align: center;
      font-size: 0.9rem;
    }
  }
  
  /* Ajustes para pantallas táctiles */
  @media (hover: none) {
    .btn-table-action, .modal-close, .pagination-button, .form-tab {
      padding: 10px;
    }
    
    .service-checkbox {
      padding: 12px;
    }
    
    .service-checkbox input {
      width: 22px;
      height: 22px;
    }
  }
</style>
{{/section}}
{{#section 'scripts'}}
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Referencias a elementos DOM
    const dashboardTabs = document.querySelectorAll('.dashboard-tab');
    const tabContents = document.querySelectorAll('.tab-content');
    const searchCotizaciones = document.getElementById('searchCotizaciones');
    const searchContratos = document.getElementById('searchContratos');
    const filterEstadoCotizacion = document.getElementById('filterEstadoCotizacion');
    const filterEstadoContrato = document.getElementById('filterEstadoContrato');
    const cotizacionesTable = document.getElementById('cotizacionesTable');
    const contratosTable = document.getElementById('contratosTable');
    const addCotizacionForm = document.getElementById('addCotizacionForm');
    const editCotizacionForm = document.getElementById('editCotizacionForm');
    const addContratoForm = document.getElementById('addContratoForm');
    const editContratoForm = document.getElementById('editContratoForm');
    const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
    const viewEditBtn = document.getElementById('viewEditBtn');
    const viewCreateContratoBtn = document.getElementById('viewCreateContratoBtn');
    const viewEditContratoBtn = document.getElementById('viewEditContratoBtn');
    const generarNumeroBtn = document.getElementById('generarNumeroBtn');
    const editGenerarNumeroBtn = document.getElementById('editGenerarNumeroBtn');
    const contratoGenerarNumeroBtn = document.getElementById('contratoGenerarNumeroBtn');
    
    // Variables para almacenar IDs
    let itemIdToDelete = null;
    let itemTypeToDelete = null;
    let currentCotizacionId = null;
    let currentContratoId = null;
    
    // Verificar si hay un parámetro de pestaña en la URL
    const urlParams = new URLSearchParams(window.location.search);
    const tabParam = urlParams.get('tab');
    
    if (tabParam === 'contratos') {
      // Activar la pestaña de contratos
      dashboardTabs.forEach(tab => {
        if (tab.getAttribute('data-tab') === 'contratos') {
          tab.classList.add('active');
        } else {
          tab.classList.remove('active');
        }
      });
      
      tabContents.forEach(content => {
        if (content.getAttribute('data-tab-content') === 'contratos') {
          content.classList.add('active');
        } else {
          content.classList.remove('active');
        }
      });
    }
    
    // Cambiar entre pestañas del dashboard
    dashboardTabs.forEach(tab => {
      tab.addEventListener('click', function() {
        const tabId = this.getAttribute('data-tab');
        
        // Desactivar todas las pestañas y contenidos
        dashboardTabs.forEach(t => t.classList.remove('active'));
        tabContents.forEach(c => c.classList.remove('active'));
        
        // Activar la pestaña y contenido seleccionados
        this.classList.add('active');
        document.querySelector(`[data-tab-content="${tabId}"]`).classList.add('active');
        
        // Actualizar la URL sin recargar la página
        const url = new URL(window.location);
        url.searchParams.set('tab', tabId);
        window.history.pushState({}, '', url);
      });
    });
    
    // Función para mostrar notificaciones toast
    function showToast(message, type = 'info') {
      const toastContainer = document.querySelector('.toast-container');
      
      const toast = document.createElement('div');
      toast.className = `toast ${type}`;
      toast.innerHTML = `
        <div class="toast-content">
          <i class="bi ${type === 'success' ? 'bi-check-circle' : type === 'error' ? 'bi-x-circle' : 'bi-info-circle'}"></i>
          <span>${message}</span>
        </div>
        <button class="toast-close"><i class="bi bi-x"></i></button>
      `;
      
      toastContainer.appendChild(toast);
      
      // Mostrar el toast
      setTimeout(() => {
        toast.classList.add('show');
      }, 100);
      
      // Configurar el botón de cierre
      const closeButton = toast.querySelector('.toast-close');
      closeButton.addEventListener('click', () => {
        toast.classList.remove('show');
        setTimeout(() => {
          toast.remove();
        }, 300);
      });
      
      // Auto-cerrar después de 5 segundos
      setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => {
          toast.remove();
        }, 300);
      }, 5000);
    }
    
    // Función para abrir modales
    function openModal(modalId) {
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.classList.add('show');
        document.body.classList.add('modal-open');
      }
    }
    
    // Función para cerrar modales
    function closeModal(modalId) {
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.classList.remove('show');
        document.body.classList.remove('modal-open');
      }
    }
    
    // Abrir modal al hacer clic en botones con data-toggle="modal"
    const modalTriggers = document.querySelectorAll('[data-toggle="modal"]');
    modalTriggers.forEach(trigger => {
      trigger.addEventListener('click', function() {
        const targetModal = this.getAttribute('data-target');
        openModal(targetModal);
        
        // Si es el botón de editar cotización, cargar los datos
        if (this.classList.contains('edit') && targetModal === 'editCotizacionModal') {
          const cotizacionId = this.getAttribute('data-id');
          loadCotizacionData(cotizacionId);
        }
        
        // Si es el botón de ver cotización, cargar los datos
        if (this.classList.contains('view') && targetModal === 'viewCotizacionModal') {
          const cotizacionId = this.getAttribute('data-id');
          loadCotizacionDataForView(cotizacionId);
        }
        
        // Si es el botón de editar contrato, cargar los datos
        if (this.classList.contains('edit') && targetModal === 'editContratoModal') {
          const contratoId = this.getAttribute('data-id');
          loadContratoData(contratoId);
        }
        
        // Si es el botón de ver contrato, cargar los datos
        if (this.classList.contains('view') && targetModal === 'viewContratoModal') {
          const contratoId = this.getAttribute('data-id');
          loadContratoDataForView(contratoId);
        }
      });
    });
    
    // Cerrar modal al hacer clic en botones con data-dismiss="modal"
    const modalClosers = document.querySelectorAll('[data-dismiss="modal"]');
    modalClosers.forEach(closer => {
      closer.addEventListener('click', function() {
        const modal = this.closest('.modal');
        if (modal) {
          modal.classList.remove('show');
          document.body.classList.remove('modal-open');
        }
      });
    });
    
    // Cerrar modal al hacer clic fuera del contenido
    document.addEventListener('click', function(event) {
      if (event.target.classList.contains('modal') && event.target.classList.contains('show')) {
        event.target.classList.remove('show');
        document.body.classList.remove('modal-open');
      }
    });
    
    // Navegación por pestañas en formularios
    const formTabs = document.querySelectorAll('.form-tab');
    
    formTabs.forEach(tab => {
      tab.addEventListener('click', function() {
        const tabId = this.getAttribute('data-tab');
        const tabContent = document.querySelector(`[data-tab-content="${tabId}"]`);
        
        // Desactivar todas las pestañas y contenidos del mismo formulario
        const formTabsContainer = this.closest('.form-tabs');
        formTabsContainer.querySelectorAll('.form-tab').forEach(t => t.classList.remove('active'));
        
        const formContainer = this.closest('.modal-body');
        formContainer.querySelectorAll('.form-tab-content').forEach(c => c.classList.remove('active'));
        
        // Activar la pestaña y contenido seleccionados
        this.classList.add('active');
        tabContent.classList.add('active');
      });
    });
    
    // Botones de navegación entre pestañas
    const nextButtons = document.querySelectorAll('.next-tab');
    const prevButtons = document.querySelectorAll('.prev-tab');
    
    nextButtons.forEach(button => {
      button.addEventListener('click', function() {
        const nextTabId = this.getAttribute('data-next');
        const nextTab = document.querySelector(`.form-tab[data-tab="${nextTabId}"]`);
        
        if (nextTab) {
          nextTab.click();
        }
      });
    });
    
    prevButtons.forEach(button => {
      button.addEventListener('click', function() {
        const prevTabId = this.getAttribute('data-prev');
        const prevTab = document.querySelector(`.form-tab[data-tab="${prevTabId}"]`);
        
        if (prevTab) {
          prevTab.click();
        }
      });
    });
    
    // Filtrar cotizaciones por estado
    if (filterEstadoCotizacion) {
      filterEstadoCotizacion.addEventListener('change', function() {
        const selectedValue = this.value;
        
        // Actualizar la URL con el filtro
        const url = new URL(window.location);
        if (selectedValue) {
          url.searchParams.set('estado', selectedValue);
        } else {
          url.searchParams.delete('estado');
        }
        window.location.href = url.toString();
      });
    }
    
    // Filtrar contratos por estado
    if (filterEstadoContrato) {
      filterEstadoContrato.addEventListener('change', function() {
        const selectedValue = this.value;
        
        // Actualizar la URL con el filtro
        const url = new URL(window.location);
        url.searchParams.set('tab', 'contratos');
        if (selectedValue) {
          url.searchParams.set('estado', selectedValue);
        } else {
          url.searchParams.delete('estado');
        }
        window.location.href = url.toString();
      });
    }
    
    // Búsqueda en la tabla de cotizaciones
    if (searchCotizaciones && cotizacionesTable) {
      searchCotizaciones.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        const rows = cotizacionesTable.querySelectorAll('tbody tr');
        
        rows.forEach(row => {
          if (row.querySelector('td[colspan]')) return; // Ignorar fila de "No hay cotizaciones"
          
          let found = false;
          const cells = row.querySelectorAll('td');
          
          cells.forEach(cell => {
            const text = cell.textContent.toLowerCase();
            if (text.includes(searchTerm)) {
              found = true;
            }
          });
          
          if (found) {
            row.style.display = '';
          } else {
            row.style.display = 'none';
          }
        });
      });
    }
    
    // Búsqueda en la tabla de contratos
    if (searchContratos && contratosTable) {
      searchContratos.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        const rows = contratosTable.querySelectorAll('tbody tr');
        
        rows.forEach(row => {
          if (row.querySelector('td[colspan]')) return; // Ignorar fila de "No hay contratos"
          
          let found = false;
          const cells = row.querySelectorAll('td');
          
          cells.forEach(cell => {
            const text = cell.textContent.toLowerCase();
            if (text.includes(searchTerm)) {
              found = true;
            }
          });
          
          if (found) {
            row.style.display = '';
          } else {
            row.style.display = 'none';
          }
        });
      });
    }
    
    // Validación de formularios
    function validateForm(form) {
      if (!form.checkValidity()) {
        form.classList.add('was-validated');
        return false;
      }
      return true;
    }
    
   // Fix for the loadCotizacionData function in cotizaciones.hbs script
function loadCotizacionData(cotizacionId) {
  currentCotizacionId = cotizacionId;
  
  fetch(`/api/cotizaciones/${cotizacionId}`)
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        const cotizacion = data.cotizacion;
        
        // Llenar formulario de edición
        document.getElementById('edit_id').value = cotizacion.id;
        document.getElementById('edit_nombre_cliente').value = cotizacion.nombre_cliente;
        document.getElementById('edit_email_cliente').value = cotizacion.email;
        document.getElementById('edit_telefono_cliente').value = cotizacion.telefono;
        document.getElementById('edit_tipo_evento_id').value = cotizacion.tipo_evento_id;
        document.getElementById('edit_num_invitados').value = cotizacion.num_meseros;
        document.getElementById('edit_ubicacion').value = cotizacion.ubicacion;
        document.getElementById('edit_costo_total').value = cotizacion.costo_total;
        document.getElementById('edit_estado').value = cotizacion.estado;
        document.getElementById('edit_detalles').value = cotizacion.detalles || '';
        document.getElementById('edit_numero_contrato').value = cotizacion.numero_contrato || '';
        
        // Formatear fecha y hora
        const fechaEvento = new Date(cotizacion.fecha_evento);
        const formattedDate = fechaEvento.toISOString().split('T')[0];
        document.getElementById('edit_fecha_evento').value = formattedDate;
        
        const hours = fechaEvento.getHours().toString().padStart(2, '0');
        const minutes = fechaEvento.getMinutes().toString().padStart(2, '0');
        document.getElementById('edit_hora_evento').value = `${hours}:${minutes}`;
        
        // Marcar servicios seleccionados
        if (cotizacion.servicios && cotizacion.servicios.length > 0) {
          document.querySelectorAll('#edit_servicios_grid input[type="checkbox"]').forEach(checkbox => {
            checkbox.checked = cotizacion.servicios.includes(parseInt(checkbox.value));
          });
        }
      } else {
        showToast(data.message || 'No se pudo cargar la información de la cotización.', 'error');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      showToast('Ocurrió un error al cargar la información de la cotización.', 'error');
    });
}
    
    // Función para cargar datos de una cotización para ver
    function loadCotizacionDataForView(cotizacionId) {
      currentCotizacionId = cotizacionId;
      
      fetch(`/api/cotizaciones/${cotizacionId}`)
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            const cotizacion = data.cotizacion;
            
            // Llenar datos de la vista
            document.getElementById('view_nombre_cliente').textContent = cotizacion.nombre_cliente;
            document.getElementById('view_email_cliente').textContent = cotizacion.email;
            document.getElementById('view_telefono_cliente').textContent = cotizacion.telefono;
            document.getElementById('view_tipo_evento').textContent = cotizacion.tipo_evento;
            document.getElementById('view_num_meseros').textContent = cotizacion.num_meseros;
            document.getElementById('view_duracion_servicio').textContent = `${cotizacion.duracion_servicio} horas`;
            document.getElementById('view_ubicacion').textContent = cotizacion.ubicacion;
            document.getElementById('view_costo_base').textContent = `$${cotizacion.costo_base}`;
            document.getElementById('view_costo_adicionales').textContent = `$${cotizacion.costo_adicionales}`;
            document.getElementById('view_cargo_ubicacion').textContent = `$${cotizacion.cargo_ubicacion}`;
            document.getElementById('view_costo_total').textContent = `$${cotizacion.costo_total}`;
            
            // Formatear fecha
            const fechaEvento = new Date(cotizacion.fecha_evento);
            document.getElementById('view_fecha_evento').textContent = fechaEvento.toLocaleDateString('es-ES', {
              year: 'numeric',
              month: 'long',
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit'
            });
            
            // Formatear fecha de creación
            const fechaCreacion = new Date(cotizacion.fecha_creacion);
            document.getElementById('view_fecha_creacion').textContent = fechaCreacion.toLocaleDateString('es-ES', {
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            });
            
            // Mostrar estado
            const estadoElement = document.getElementById('view_estado');
            estadoElement.textContent = cotizacion.estado;
            estadoElement.className = `badge-status ${cotizacion.estado}`;
            
            // Mostrar número de contrato
            document.getElementById('view_numero_contrato').textContent = cotizacion.numero_contrato || '-';
            
            // Mostrar servicios
            const serviciosList = document.getElementById('view_servicios_list');
            serviciosList.innerHTML = '';
            
            if (cotizacion.servicios && cotizacion.servicios.length > 0) {
              // Obtener nombres de servicios
              fetch('/api/servicios')
                .then(response => response.json())
                .then(serviciosData => {
                  if (serviciosData.success) {
                    const servicios = serviciosData.servicios;
                    cotizacion.servicios.forEach(servicioId => {
                      const servicio = servicios.find(s => s.id === servicioId);
                      if (servicio) {
                        const li = document.createElement('li');
                        li.textContent = servicio.titulo;
                        serviciosList.appendChild(li);
                      }
                    });
                  }
                })
                .catch(error => {
                  console.error('Error al cargar servicios:', error);
                });
            } else {
              const li = document.createElement('li');
              li.textContent = 'No hay servicios adicionales';
              serviciosList.appendChild(li);
            }
            
            // Mostrar detalles adicionales
            const detallesSection = document.getElementById('view_detalles_section');
            const detallesElement = document.getElementById('view_detalles');
            
            if (cotizacion.detalles) {
              detallesElement.textContent = cotizacion.detalles;
              detallesSection.style.display = 'block';
            } else {
              detallesSection.style.display = 'none';
            }
            
            // Configurar botón de crear contrato
            const createContratoBtn = document.getElementById('viewCreateContratoBtn');
            if (cotizacion.numero_contrato) {
              createContratoBtn.style.display = 'none';
            } else {
              createContratoBtn.style.display = 'inline-flex';
            }
          } else {
            showToast(data.message || 'No se pudo cargar la información de la cotización.', 'error');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showToast('Ocurrió un error al cargar la información de la cotización.', 'error');
        });
    }
    
    // Función para cargar datos de un contrato para editar
    function loadContratoData(contratoId) {
      currentContratoId = contratoId;
      
      fetch(`/api/contratos/${contratoId}`)
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            const contrato = data.contrato;
            
            // Llenar formulario de edición
            document.getElementById('edit_contrato_id').value = contrato.id;
            document.getElementById('edit_contrato_numero').value = contrato.numero_contrato;
            document.getElementById('edit_contrato_nombre_cliente').value = contrato.nombre_cliente;
            document.getElementById('edit_contrato_tipo_evento_id').value = contrato.tipo_evento_id;
            document.getElementById('edit_contrato_estado').value = contrato.estado;
            
            // Formatear fecha
            const fechaEvento = new Date(contrato.fecha_evento);
            const formattedDate = fechaEvento.toISOString().split('T')[0];
            document.getElementById('edit_contrato_fecha_evento').value = formattedDate;
          } else {
            showToast(data.message || 'No se pudo cargar la información del contrato.', 'error');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showToast('Ocurrió un error al cargar la información del contrato.', 'error');
        });
    }
    
    // Función para cargar datos de un contrato para ver
    function loadContratoDataForView(contratoId) {
      currentContratoId = contratoId;
      
      fetch(`/api/contratos/${contratoId}`)
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            const contrato = data.contrato;
            
            // Llenar datos de la vista
            document.getElementById('view_contrato_numero').textContent = contrato.numero_contrato;
            document.getElementById('view_contrato_cliente').textContent = contrato.nombre_cliente;
            document.getElementById('view_contrato_tipo_evento').textContent = contrato.tipo_evento;
            
            // Formatear fecha
            const fechaEvento = new Date(contrato.fecha_evento);
            document.getElementById('view_contrato_fecha').textContent = fechaEvento.toLocaleDateString('es-ES', {
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            });
            
            // Formatear fecha de creación
            const fechaCreacion = new Date(contrato.fecha_creacion);
            document.getElementById('view_contrato_fecha_creacion').textContent = fechaCreacion.toLocaleDateString('es-ES', {
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            });
            
            // Mostrar estado
            const estadoElement = document.getElementById('view_contrato_estado');
            estadoElement.textContent = contrato.estado;
            estadoElement.className = `badge-status ${contrato.estado}`;
          } else {
            showToast(data.message || 'No se pudo cargar la información del contrato.', 'error');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showToast('Ocurrió un error al cargar la información del contrato.', 'error');
        });
    }
    
    // Botón para ir de vista a edición de cotización
    if (viewEditBtn) {
      viewEditBtn.addEventListener('click', function() {
        closeModal('viewCotizacionModal');
        loadCotizacionData(currentCotizacionId);
        openModal('editCotizacionModal');
      });
    }
    
    // Botón para ir de vista a edición de contrato
    if (viewEditContratoBtn) {
      viewEditContratoBtn.addEventListener('click', function() {
        closeModal('viewContratoModal');
        loadContratoData(currentContratoId);
        openModal('editContratoModal');
      });
    }
    
    
    
    // Botones para generar número de contrato
    if (generarNumeroBtn) {
      generarNumeroBtn.addEventListener('click', function() {
        fetch('/api/contratos/generar-numero')
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              document.getElementById('numero_contrato').value = data.numero;
            } else {
              showToast(data.message || 'No se pudo generar el número de contrato.', 'error');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            showToast('Ocurrió un error al generar el número de contrato.', 'error');
          });
      });
    }
    
    if (editGenerarNumeroBtn) {
      editGenerarNumeroBtn.addEventListener('click', function() {
        fetch('/api/contratos/generar-numero')
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              document.getElementById('edit_numero_contrato').value = data.numero;
            } else {
              showToast(data.message || 'No se pudo generar el número de contrato.', 'error');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            showToast('Ocurrió un error al generar el número de contrato.', 'error');
          });
      });
    }
    
    if (contratoGenerarNumeroBtn) {
      contratoGenerarNumeroBtn.addEventListener('click', function() {
        fetch('/api/contratos/generar-numero')
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              document.getElementById('contrato_numero').value = data.numero;
            } else {
              showToast(data.message || 'No se pudo generar el número de contrato.', 'error');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            showToast('Ocurrió un error al generar el número de contrato.', 'error');
          });
      });
    }
    
    // Manejar envío del formulario de agregar cotización
    if (addCotizacionForm) {
      addCotizacionForm.addEventListener('submit', function(event) {
        event.preventDefault();
        
        if (!validateForm(this)) {
          return;
        }
        
        // Obtener datos del formulario
        const formData = new FormData(this);
        const cotizacionData = {};
        
        // Convertir FormData a objeto
        formData.forEach((value, key) => {
          if (key === 'servicios[]') {
            if (!cotizacionData.servicios) {
              cotizacionData.servicios = [];
            }
            cotizacionData.servicios.push(parseInt(value));
          } else {
            cotizacionData[key] = value;
          }
        });
        
        // Combinar fecha y hora
        if (cotizacionData.fecha_evento && cotizacionData.hora_evento) {
          const fechaHora = new Date(`${cotizacionData.fecha_evento}T${cotizacionData.hora_evento}`);
          cotizacionData.fecha_evento = fechaHora.toISOString();
        }
        
        // Eliminar campo de hora (ya está incluido en fecha_evento)
        delete cotizacionData.hora_evento;
        
        // Update the form fields to match the database schema
        // In the addCotizacionForm section:
        
        // Enviar datos al servidor
        fetch('/api/cotizaciones', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(cotizacionData)
        })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              showToast('Cotización creada exitosamente.', 'success');
              closeModal('addCotizacionModal');
              
              // Recargar la página después de un breve retraso
              setTimeout(() => {
                window.location.reload();
              }, 1000);
            } else {
              showToast(data.message || 'No se pudo crear la cotización.', 'error');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            showToast('Ocurrió un error al crear la cotización.', 'error');
          });
      });
    }
    
    // Manejar envío del formulario de editar cotización
    if (editCotizacionForm) {
      editCotizacionForm.addEventListener('submit', function(event) {
        event.preventDefault();
        
        if (!validateForm(this)) {
          return;
        }
        
        // Obtener datos del formulario
        const formData = new FormData(this);
        const cotizacionData = {};
        
        // Convertir FormData a objeto
        formData.forEach((value, key) => {
          if (key === 'servicios[]') {
            if (!cotizacionData.servicios) {
              cotizacionData.servicios = [];
            }
            cotizacionData.servicios.push(parseInt(value));
          } else {
            cotizacionData[key] = value;
          }
        });
        
        // Combinar fecha y hora
        if (cotizacionData.fecha_evento && cotizacionData.hora_evento) {
          const fechaHora = new Date(`${cotizacionData.fecha_evento}T${cotizacionData.hora_evento}`);
          cotizacionData.fecha_evento = fechaHora.toISOString();
        }
        
        // Eliminar campo de hora (ya está incluido en fecha_evento)
        delete cotizacionData.hora_evento;
        
        // Update the form fields to match the database schema
        // In the editCotizacionForm section:
        
        // Enviar datos al servidor
        fetch(`/api/cotizaciones/${cotizacionData.id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(cotizacionData)
        })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              showToast('Cotización actualizada exitosamente.', 'success');
              closeModal('editCotizacionModal');
              
              // Recargar la página después de un breve retraso
              setTimeout(() => {
                window.location.reload();
              }, 1000);
            } else {
              showToast(data.message || 'No se pudo actualizar la cotización.', 'error');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            showToast('Ocurrió un error al actualizar la cotización.', 'error');
          });
      });
    }
    
   
    
    // Manejar envío del formulario de editar contrato
    if (editContratoForm) {
      editContratoForm.addEventListener('submit', function(event) {
        event.preventDefault();
        
        if (!validateForm(this)) {
          return;
        }
        
        // Obtener datos del formulario
        const formData = new FormData(this);
        const contratoData = {};
        
        // Convertir FormData a objeto
        formData.forEach((value, key) => {
          contratoData[key] = value;
        });
        
        // Enviar datos al servidor
        fetch(`/api/contratos/${contratoData.id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(contratoData)
        })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              showToast('Contrato actualizado exitosamente.', 'success');
              closeModal('editContratoModal');
              
              // Recargar la página después de un breve retraso
              setTimeout(() => {
                window.location.reload();
              }, 1000);
            } else {
              showToast(data.message || 'No se pudo actualizar el contrato.', 'error');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            showToast('Ocurrió un error al actualizar el contrato.', 'error');
          });
      });
    }
    
    // Manejar botones de eliminar
    const deleteButtons = document.querySelectorAll('.btn-delete');
    
    deleteButtons.forEach(button => {
      button.addEventListener('click', function() {
        itemIdToDelete = this.getAttribute('data-id');
        itemTypeToDelete = this.getAttribute('data-type');
        const itemName = this.getAttribute('data-name');
        
        // Actualizar modal de confirmación
        document.getElementById('deleteItemType').textContent = itemTypeToDelete === 'cotizaciones' ? 'esta cotización' : 'este contrato';
        document.getElementById('deleteItemName').textContent = itemName;
        
        // Abrir modal de confirmación
        openModal('confirmDeleteModal');
      });
    });
    
    // Confirmar eliminación
    if (confirmDeleteBtn) {
      confirmDeleteBtn.addEventListener('click', function() {
        if (!itemIdToDelete || !itemTypeToDelete) {
          return;
        }
        
        // Enviar solicitud de eliminación
        fetch(`/api/${itemTypeToDelete}/${itemIdToDelete}`, {
          method: 'DELETE'
        })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              showToast(`${itemTypeToDelete === 'cotizaciones' ? 'Cotización' : 'Contrato'} eliminado exitosamente.`, 'success');
              closeModal('confirmDeleteModal');
              
              // Recargar la página después de un breve retraso
              setTimeout(() => {
                window.location.reload();
              }, 1000);
            } else {
              showToast(data.message || `No se pudo eliminar ${itemTypeToDelete === 'cotizaciones' ? 'la cotización' : 'el contrato'}.`, 'error');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            showToast(`Ocurrió un error al eliminar ${itemTypeToDelete === 'cotizaciones' ? 'la cotización' : 'el contrato'}.`, 'error');
          });
      });
    }
    
   
    
    // Manejar botones de cambiar estado de contrato
    const cambiarEstadoContratoButtons = document.querySelectorAll('.cambiar-estado-contrato-btn');
    
    cambiarEstadoContratoButtons.forEach(button => {
      button.addEventListener('click', function() {
        const contratoId = this.getAttribute('data-id');
        const nuevoEstado = this.getAttribute('data-estado');
        
        // Enviar solicitud de cambio de estado
        fetch(`/api/contratos/${contratoId}/estado`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ estado: nuevoEstado })
        })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              showToast(`Estado de contrato cambiado a "${nuevoEstado}" exitosamente.`, 'success');
              
              // Recargar la página después de un breve retraso
              setTimeout(() => {
                window.location.reload();
              }, 1000);
            } else {
              showToast(data.message || 'No se pudo cambiar el estado del contrato.', 'error');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            showToast('Ocurrió un error al cambiar el estado del contrato.', 'error');
          });
      });
    });
    
    // Código corregido para manejar la creación de contratos desde cotizaciones

// 1. Botón "Crear Contrato" en el modal de vista de cotización
if (viewCreateContratoBtn) {
  viewCreateContratoBtn.addEventListener('click', function() {
    // Obtener los datos de la cotización actual
    fetch(`/api/cotizaciones/${currentCotizacionId}`)
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          const cotizacion = data.cotizacion;
          
          // Generar número de contrato nuevo
          fetch('/api/contratos/generar-numero')
            .then(response => response.json())
            .then(numeroData => {
              if (numeroData.success) {
                // Llenar formulario de contrato con datos de la cotización
                document.getElementById('contrato_numero').value = numeroData.numero;
                document.getElementById('contrato_nombre_cliente').value = cotizacion.nombre_cliente;
                document.getElementById('contrato_tipo_evento_id').value = cotizacion.tipo_evento_id;
                
                // Formatear fecha
                const fechaEvento = new Date(cotizacion.fecha_evento);
                const formattedDate = fechaEvento.toISOString().split('T')[0];
                document.getElementById('contrato_fecha_evento').value = formattedDate;
                
                // Guardar el ID de la cotización en un atributo del formulario
                document.getElementById('addContratoForm').setAttribute('data-cotizacion-id', currentCotizacionId);
                
                // Cerrar modal de vista y abrir modal de contrato
                closeModal('viewCotizacionModal');
                openModal('addContratoModal');
              } else {
                showToast(numeroData.message || 'No se pudo generar el número de contrato.', 'error');
              }
            })
            .catch(error => {
              console.error('Error:', error);
              showToast('Ocurrió un error al generar el número de contrato.', 'error');
            });
        } else {
          showToast(data.message || 'No se pudo cargar la información de la cotización.', 'error');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showToast('Ocurrió un error al cargar la información de la cotización.', 'error');
      });
  });
}

// 2. Botones "Crear" en la tabla de cotizaciones
const crearContratoButtons = document.querySelectorAll('.crear-contrato-btn');

crearContratoButtons.forEach(button => {
  button.addEventListener('click', function(event) {
    event.stopPropagation(); // Evitar que se propague el evento
    const cotizacionId = this.getAttribute('data-id');
    
    // Obtener los datos de la cotización
    fetch(`/api/cotizaciones/${cotizacionId}`)
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          const cotizacion = data.cotizacion;
          
          // Generar número de contrato nuevo
          fetch('/api/contratos/generar-numero')
            .then(response => response.json())
            .then(numeroData => {
              if (numeroData.success) {
                // Llenar formulario de contrato con datos de la cotización
                document.getElementById('contrato_numero').value = numeroData.numero;
                document.getElementById('contrato_nombre_cliente').value = cotizacion.nombre_cliente;
                document.getElementById('contrato_tipo_evento_id').value = cotizacion.tipo_evento_id;
                
                // Formatear fecha
                const fechaEvento = new Date(cotizacion.fecha_evento);
                const formattedDate = fechaEvento.toISOString().split('T')[0];
                document.getElementById('contrato_fecha_evento').value = formattedDate;
                
                // Guardar el ID de la cotización en un atributo del formulario
                document.getElementById('addContratoForm').setAttribute('data-cotizacion-id', cotizacionId);
                
                // Abrir modal de contrato
                openModal('addContratoModal');
              } else {
                showToast(numeroData.message || 'No se pudo generar el número de contrato.', 'error');
              }
            })
            .catch(error => {
              console.error('Error:', error);
              showToast('Ocurrió un error al generar el número de contrato.', 'error');
            });
        } else {
          showToast(data.message || 'No se pudo cargar la información de la cotización.', 'error');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showToast('Ocurrió un error al cargar la información de la cotización.', 'error');
      });
  });
});

// 3. Envío del formulario de agregar contrato
if (addContratoForm) {
  addContratoForm.addEventListener('submit', function(event) {
    event.preventDefault();
    
    if (!validateForm(this)) {
      return;
    }
    
    // Obtener datos del formulario
    const formData = new FormData(this);
    const contratoData = {};
    
    // Convertir FormData a objeto
    formData.forEach((value, key) => {
      contratoData[key] = value;
    });
    
    // Crear el contrato nuevo
    fetch('/api/contratos', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(contratoData)
    })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          showToast('Contrato creado exitosamente.', 'success');
          
          // Obtener el ID de la cotización asociada (si existe)
          const cotizacionId = this.getAttribute('data-cotizacion-id');
          
          if (cotizacionId) {
            // Actualizar la cotización con el número de contrato
            fetch(`/api/cotizaciones/${cotizacionId}`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                id: cotizacionId,
                numero_contrato: contratoData.numero_contrato,
                // Incluir campos requeridos para la actualización
                nombre_cliente: document.getElementById('contrato_nombre_cliente').value,
                email_cliente: document.getElementById('view_email_cliente') ? document.getElementById('view_email_cliente').textContent : '',
                telefono_cliente: document.getElementById('view_telefono_cliente') ? document.getElementById('view_telefono_cliente').textContent : '',
                tipo_evento_id: contratoData.tipo_evento_id,
                fecha_evento: contratoData.fecha_evento
              })
            })
              .then(response => response.json())
              .then(updateData => {
                if (updateData.success) {
                  showToast('Cotización actualizada con el número de contrato.', 'success');
                } else {
                  showToast(updateData.message || 'No se pudo actualizar la cotización con el número de contrato.', 'error');
                }
                
                // Cerrar el modal y recargar la página
                closeModal('addContratoModal');
                setTimeout(() => {
                  window.location.reload();
                }, 1000);
              })
              .catch(error => {
                console.error('Error al actualizar cotización:', error);
                showToast('Ocurrió un error al actualizar la cotización.', 'error');
                
                // Cerrar el modal y recargar la página de todos modos
                closeModal('addContratoModal');
                setTimeout(() => {
                  window.location.reload();
                }, 1000);
              });
          } else {
            // Si no hay cotización asociada, simplemente cerrar el modal y recargar
            closeModal('addContratoModal');
            setTimeout(() => {
              window.location.reload();
            }, 1000);
          }
        } else {
          showToast(data.message || 'No se pudo crear el contrato.', 'error');
        }
      })
      .catch(error => {
        console.error('Error al crear contrato:', error);
        showToast('Ocurrió un error al crear el contrato.', 'error');
      });
  });
}

// 4. Modificar el comportamiento al confirmar una cotización
const cambiarEstadoButtons = document.querySelectorAll('.cambiar-estado-btn');

cambiarEstadoButtons.forEach(button => {
  button.addEventListener('click', function() {
    const cotizacionId = this.getAttribute('data-id');
    const nuevoEstado = this.getAttribute('data-estado');
    
    // Si se está confirmando la cotización, verificar si necesita contrato
    if (nuevoEstado === 'confirmada') {
      fetch(`/api/cotizaciones/${cotizacionId}`)
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            const cotizacion = data.cotizacion;
            
            // Si ya tiene contrato, solo cambiar el estado
            if (cotizacion.numero_contrato) {
              cambiarEstadoCotizacion(cotizacionId, nuevoEstado);
            } else {
              // Preguntar al usuario si desea crear un contrato
              if (confirm('¿Desea crear un contrato para esta cotización?')) {
                // Generar número de contrato nuevo
                fetch('/api/contratos/generar-numero')
                  .then(response => response.json())
                  .then(numeroData => {
                    if (numeroData.success) {
                      // Llenar formulario de contrato con datos de la cotización
                      document.getElementById('contrato_numero').value = numeroData.numero;
                      document.getElementById('contrato_nombre_cliente').value = cotizacion.nombre_cliente;
                      document.getElementById('contrato_tipo_evento_id').value = cotizacion.tipo_evento_id;
                      
                      // Formatear fecha
                      const fechaEvento = new Date(cotizacion.fecha_evento);
                      const formattedDate = fechaEvento.toISOString().split('T')[0];
                      document.getElementById('contrato_fecha_evento').value = formattedDate;
                      
                      // Guardar el ID de la cotización y el nuevo estado
                      document.getElementById('addContratoForm').setAttribute('data-cotizacion-id', cotizacionId);
                      document.getElementById('addContratoForm').setAttribute('data-nuevo-estado', nuevoEstado);
                      
                      // Abrir modal de contrato
                      openModal('addContratoModal');
                    } else {
                      showToast(numeroData.message || 'No se pudo generar el número de contrato.', 'error');
                      // Cambiar el estado de la cotización de todos modos
                      cambiarEstadoCotizacion(cotizacionId, nuevoEstado);
                    }
                  })
                  .catch(error => {
                    console.error('Error:', error);
                    showToast('Ocurrió un error al generar el número de contrato.', 'error');
                    // Cambiar el estado de la cotización de todos modos
                    cambiarEstadoCotizacion(cotizacionId, nuevoEstado);
                  });
              } else {
                // Si el usuario no quiere crear contrato, solo cambiar el estado
                cambiarEstadoCotizacion(cotizacionId, nuevoEstado);
              }
            }
          } else {
            showToast(data.message || 'No se pudo cargar la información de la cotización.', 'error');
            // Cambiar el estado de la cotización de todos modos
            cambiarEstadoCotizacion(cotizacionId, nuevoEstado);
          }
        })
        .catch(error => {
          console.error('Error:', error);
          showToast('Ocurrió un error al cargar la información de la cotización.', 'error');
          // Cambiar el estado de la cotización de todos modos
          cambiarEstadoCotizacion(cotizacionId, nuevoEstado);
        });
    } else {
      // Para otros estados, simplemente cambiar el estado
      cambiarEstadoCotizacion(cotizacionId, nuevoEstado);
    }
  });
});

// Función auxiliar para cambiar el estado de una cotización
function cambiarEstadoCotizacion(cotizacionId, nuevoEstado) {
  // Enviar solicitud de cambio de estado
  fetch(`/api/cotizaciones/${cotizacionId}/estado`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({ estado: nuevoEstado })
  })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        showToast(`Estado de cotización cambiado a "${nuevoEstado}" exitosamente.`, 'success');
        
        // Recargar la página después de un breve retraso
        setTimeout(() => {
          window.location.reload();
        }, 1000);
      } else {
        showToast(data.message || 'No se pudo cambiar el estado de la cotización.', 'error');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      showToast('Ocurrió un error al cambiar el estado de la cotización.', 'error');
    });
}
    
    // Manejar botones de ver contrato
    const verContratoButtons = document.querySelectorAll('.ver-contrato-btn');
    
    verContratoButtons.forEach(button => {
      button.addEventListener('click', function() {
        const numeroContrato = this.getAttribute('data-numero');
        
        // Buscar contrato por número
        fetch(`/api/contratos/numero/${numeroContrato}`)
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              const contrato = data.contrato;
              
              // Cargar datos del contrato en la vista
              loadContratoDataForView(contrato.id);
              
              // Abrir modal de vista de contrato
              openModal('viewContratoModal');
            } else {
              showToast(data.message || 'No se pudo encontrar el contrato.', 'error');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            showToast('Ocurrió un error al buscar el contrato.', 'error');
          });
      });
    });
    
    // Manejar dropdowns
    const dropdownToggles = document.querySelectorAll('.dropdown-toggle');
    
    dropdownToggles.forEach(toggle => {
      toggle.addEventListener('click', function(event) {
        event.stopPropagation();
        const dropdown = this.nextElementSibling;
        
        // Cerrar todos los dropdowns abiertos
        document.querySelectorAll('.dropdown-menu.show').forEach(menu => {
          if (menu !== dropdown) {
            menu.classList.remove('show');
          }
        });
        
        // Alternar el dropdown actual
        dropdown.classList.toggle('show');
      });
    });
    
    // Cerrar dropdowns al hacer clic fuera
    document.addEventListener('click', function() {
      document.querySelectorAll('.dropdown-menu.show').forEach(menu => {
        menu.classList.remove('show');
      });
    });
    
    // Función para ajustar elementos según el tamaño de pantalla
    function adjustResponsiveElements() {
      const width = window.innerWidth;
      const height = window.innerHeight;
      const isLandscape = width > height;
      
      // Ajustar altura de modales en landscape
      if (isLandscape && width <= 992) {
        const modalBodies = document.querySelectorAll('.modal-body');
        modalBodies.forEach(body => {
          body.style.maxHeight = (height - 150) + 'px';
        });
      } else {
        const modalBodies = document.querySelectorAll('.modal-body');
        modalBodies.forEach(body => {
          body.style.maxHeight = '';
        });
      }
    }
    
    // Ejecutar al cargar
    adjustResponsiveElements();
    
    // Ejecutar al cambiar tamaño o orientación
    window.addEventListener('resize', adjustResponsiveElements);
    window.addEventListener('orientationchange', adjustResponsiveElements);
    
    // Exponer función showToast globalmente
    window.showToast = showToast;
  });
</script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Función para formatear fechas en formato legible
  function formatDate(dateString) {
    if (!dateString) return "-";
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('es-ES', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    } catch (e) {
      console.error("Error al formatear fecha:", e);
      return dateString;
    }
  }
  
  // Formatear todas las fechas en la tabla de contratos
  document.querySelectorAll('#contratosTable tbody tr').forEach(row => {
    const fechaCell = row.querySelector('td[data-column="fecha_evento"]');
    const fechaCreacionCell = row.querySelector('td[data-column="fecha_creacion"]');
    
    if (fechaCell && fechaCell.textContent) {
      fechaCell.textContent = formatDate(fechaCell.textContent);
    }
    
    if (fechaCreacionCell && fechaCreacionCell.textContent) {
      fechaCreacionCell.textContent = formatDate(fechaCreacionCell.textContent);
    }
  });
});
</script>
{{/section}}

